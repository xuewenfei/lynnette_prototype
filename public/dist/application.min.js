"use strict";var ApplicationConfiguration=function(){var applicationModuleName="mean",applicationModuleVendorDependencies=["ngResource","ngAnimate","ui.router","ui.bootstrap","ui.utils"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("achievements"),ApplicationConfiguration.registerModule("articles"),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("kcomponents"),ApplicationConfiguration.registerModule("levels"),ApplicationConfiguration.registerModule("users"),angular.module("achievements").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Achievements","achievements","dropdown","/achievements(/create)?"),Menus.addSubMenuItem("topbar","achievements","List Achievements","achievements"),Menus.addSubMenuItem("topbar","achievements","New Achievement","achievements/create")}]),angular.module("achievements").config(["$stateProvider",function($stateProvider){$stateProvider.state("listAchievements",{url:"/achievements",templateUrl:"modules/achievements/views/list-achievements.client.view.html"}).state("createAchievement",{url:"/achievements/create",templateUrl:"modules/achievements/views/create-achievement.client.view.html"}).state("viewAchievement",{url:"/achievements/:achievementId",templateUrl:"modules/achievements/views/view-achievement.client.view.html"}).state("editAchievement",{url:"/achievements/:achievementId/edit",templateUrl:"modules/achievements/views/edit-achievement.client.view.html"})}]),angular.module("achievements").controller("AchievementsController",["$scope","$stateParams","$location","Authentication","Achievements","$rootScope",function($scope,$stateParams,$location,Authentication,Achievements,$rootScope){$scope.authentication=Authentication,$scope.create=function(){var achievement=new Achievements({name:this.name,description:this.description});achievement.$save(function(response){$location.path("achievements/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(achievement){if(achievement){achievement.$remove();for(var i in $scope.achievements)$scope.achievements[i]===achievement&&$scope.achievements.splice(i,1)}else $scope.achievement.$remove(function(){$location.path("achievements")})},$scope.update=function(){var achievement=$scope.achievement;achievement.$update(function(){$location.path("achievements/"+achievement._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.achievements=Achievements.query()},$scope.findOne=function(){$scope.achievement=Achievements.get({achievementId:$stateParams.achievementId})};var achievements=new Object;achievements.a1=!1,achievements.a2=!1,achievements.a3=!1,achievements.a4=!1;var audio=new Audio("/modules/achievements/img/bell.wav");$scope.achievement=new Object,$scope.achievement.title="Run, Don't Walk",$scope.achievement.description="Select three unmastered problems in a row.",$scope.achievement.icon="run_dont_walk",$scope.make_visible=!1,$scope.$on("selectionStreak",function(event,data){3==data.streak&&0==$scope.make_visible&&0==achievements.a1&&(audio.play(),$scope.make_visible=!0,achievements.a1=!0,$scope.achievement.title="Run, Don't Walk",$scope.achievement.description="Select three unmastered problems in a row.",$scope.achievement.icon="run_dont_walk",$rootScope.$broadcast("achievement_earned",{achievement_id:1}),setTimeout(function(){$scope.make_visible=!1,$scope.$digest()},5500))}),$scope.$on("total_unmastered",function(event,data){10==data.number&&0==$scope.make_visible&&0==achievements.a2&&(audio.play(),$scope.make_visible=!0,achievements.a2=!0,$scope.achievement.title="Mountain Climber",$scope.achievement.description="Complete 10 unmastered problems.",$scope.achievement.icon="mountain_climber",$rootScope.$broadcast("achievement_earned",{achievement_id:2}),setTimeout(function(){$scope.make_visible=!1,$scope.$digest()},5500))})}]),angular.module("achievements").factory("Achievements",["$resource",function($resource){return $resource("achievements/:achievementId",{achievementId:"@_id"},{update:{method:"PUT"}})}]),angular.module("articles").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Articles","articles","dropdown","/articles(/create)?"),Menus.addSubMenuItem("topbar","articles","List Articles","articles"),Menus.addSubMenuItem("topbar","articles","New Article","articles/create")}]),angular.module("articles").config(["$stateProvider",function($stateProvider){$stateProvider.state("listArticles",{url:"/articles",templateUrl:"modules/articles/views/list-articles.client.view.html"}).state("createArticle",{url:"/articles/create",templateUrl:"modules/articles/views/create-article.client.view.html"}).state("viewArticle",{url:"/articles/:articleId",templateUrl:"modules/articles/views/view-article.client.view.html"}).state("editArticle",{url:"/articles/:articleId/edit",templateUrl:"modules/articles/views/edit-article.client.view.html"})}]),angular.module("articles").controller("ArticlesController",["$scope","$stateParams","$location","Authentication","Articles",function($scope,$stateParams,$location,Authentication,Articles){$scope.authentication=Authentication,$scope.create=function(){var article=new Articles({title:this.title,content:this.content});article.$save(function(response){$location.path("articles/"+response._id),$scope.title="",$scope.content=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(article){if(article){article.$remove();for(var i in $scope.articles)$scope.articles[i]===article&&$scope.articles.splice(i,1)}else $scope.article.$remove(function(){$location.path("articles")})},$scope.update=function(){var article=$scope.article;article.$update(function(){$location.path("articles/"+article._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.articles=Articles.query()},$scope.findOne=function(){$scope.article=Articles.get({articleId:$stateParams.articleId})}}]),angular.module("articles").factory("Articles",["$resource",function($resource){return $resource("articles/:articleId",{articleId:"@_id"},{update:{method:"PUT"}})}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1});try{Typekit.load()}catch(e){}}]),angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication}]),angular.module("core").controller("UserInfoController",["$scope","Authentication","Menus","$rootScope",function($scope,Authentication,Menus,$rootScope){$scope.authentication=Authentication,console.log(Authentication),$scope.displayName=Authentication.user.displayName,$scope.selectionLevel=Authentication.user.selectionLevel,$scope.completionLevel=Authentication.user.completionLevel,$scope.currentSequence,$scope.currentStreak=0,$scope.totalgood=0,$scope.totalall=0,$scope.percentgood=0,$scope.stars_earned=0,$scope.session_total_unmastered=0,$scope.achievement_earned=0,$scope.eventList=new Array,$scope.$on("levelselect",function(event,data){console.log("UserInfoController received levelselect");var selectionEvent=new Object;selectionEvent.eventType="selection",selectionEvent.level=data.level,selectionEvent.mastered=data.mastered,selectionEvent.timestamp=(new Date).getTime(),0==data.mastered?($scope.currentStreak++,$rootScope.$broadcast("selectionStreak",{streak:$scope.currentStreak}),console.log("currentStreak"),console.log($scope.currentStreak),$scope.totalgood++,$scope.session_total_unmastered++,$rootScope.$broadcast("total_unmastered",{number:$scope.session_total_unmastered})):$scope.currentStreak=0,$scope.totalall++,$scope.percentgood=Math.round($scope.totalgood/$scope.totalall*100),$scope.eventList.push(selectionEvent),console.log($scope.eventList),$scope.totalall>=5&&$rootScope.$broadcast("aint_scared_complete",{}),$scope.currentStreak>=10&&$rootScope.$broadcast("hot_streak_complete",{})}),$scope.$on("levelcomplete",function(){}),$scope.$on("levelmastered",function(event,data){console.log("UserInfoController received levelmastered"),console.log("levelid "+data.levelid);var masteredEvent=new Object;masteredEvent.eventType="levelcomplete",masteredEvent.level=data.levelid,masteredEvent.timestamp=(new Date).getTime(),masteredEvent.sequence=new Array,setTimeout(function(){for(var i=0;i<$scope.eventList.length;i++)"selection"==$scope.eventList[i].eventType&&masteredEvent.sequence.push($scope.eventList[i]);for(var i=0;i<$scope.eventList.length;i++)"selection"==$scope.eventList[i].eventType&&($scope.eventList.splice(i,1),i--);$scope.eventList.push(masteredEvent),$scope.currentSequence=masteredEvent,console.log("current sequence"),console.log($scope.currentSequence),$scope.total_sequence=$scope.currentSequence.sequence.length,$scope.missed_opportunities=0;for(var i=0;i<$scope.currentSequence.sequence.length;i++)1==$scope.currentSequence.sequence[i].mastered&&$scope.missed_opportunities++;$scope.stars=Math.round((100-100*($scope.missed_opportunities/$scope.total_sequence))/20),console.log("stars = "+$scope.stars),$scope.$broadcast("stars_added",{stars:$scope.stars}),console.log($scope.eventList)},500)}),$scope.$on("stars_added",function(event,data){console.log("received stars_added"),$scope.stars_earned=$scope.stars_earned+data.stars,$scope.$digest()}),$scope.$on("achievement_earned",function(event,data){$scope.achievement_earned=data.achievement_id,console.log(data),console.log($scope.achievement_earned)})}]).directive("problemHistory",function(){return{templateUrl:"problemHistory.html"}}),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("kcomponents").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Kcomponents","kcomponents","dropdown","/kcomponents(/create)?"),Menus.addSubMenuItem("topbar","kcomponents","List Kcomponents","kcomponents"),Menus.addSubMenuItem("topbar","kcomponents","New Kcomponent","kcomponents/create")}]),angular.module("kcomponents").config(["$stateProvider",function($stateProvider){$stateProvider.state("listKcomponents",{url:"/kcomponents",templateUrl:"modules/kcomponents/views/list-kcomponents.client.view.html"}).state("createKcomponent",{url:"/kcomponents/create",templateUrl:"modules/kcomponents/views/create-kcomponent.client.view.html"}).state("viewKcomponent",{url:"/kcomponents/:kcomponentId",templateUrl:"modules/kcomponents/views/view-kcomponent.client.view.html"}).state("editKcomponent",{url:"/kcomponents/:kcomponentId/edit",templateUrl:"modules/kcomponents/views/edit-kcomponent.client.view.html"})}]),angular.module("kcomponents").controller("KcomponentsController",["$scope","$stateParams","$location","Authentication","Kcomponents","$rootScope",function($scope,$stateParams,$location,Authentication,Kcomponents){$scope.authentication=Authentication,$scope.create=function(){var kcomponent=new Kcomponents({name:this.name});kcomponent.$save(function(response){$location.path("kcomponents/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(kcomponent){if(kcomponent){kcomponent.$remove();for(var i in $scope.kcomponents)$scope.kcomponents[i]===kcomponent&&$scope.kcomponents.splice(i,1)}else $scope.kcomponent.$remove(function(){$location.path("kcomponents")})},$scope.update=function(){var kcomponent=$scope.kcomponent;kcomponent.$update(function(){$location.path("kcomponents/"+kcomponent._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.updateWithin=function(howmuch){console.log(kcomponent);var kcomponent=new Kcomponents($scope.updateKC);1==howmuch?kcomponent.percentComplete=kcomponent.percentComplete+0:2==howmuch?kcomponent.percentComplete=kcomponent.percentComplete+7:3==howmuch&&(kcomponent.percentComplete=kcomponent.percentComplete+24),kcomponent.percentComplete>=100&&(kcomponent.percentComplete=100,kcomponent.mastered=!0),kcomponent.$update(function(){},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.kcomponents=Kcomponents.query(),console.log($scope.kcomponents)},$scope.findOne=function(){$scope.kcomponent=Kcomponents.get({kcomponentId:$stateParams.kcomponentId}),console.log($stateParams.kcomponentId)},$scope.findOneArg=function(id){$scope.updateKC=Kcomponents.get({kcomponentId:id}),console.log($scope.updateKC)},$scope.$on("KCbroadcast",function(event,args){console.log("received KCbroadcast:"),console.log(args);for(var i=0;i<args.kcs.length;i++){var kcomponent=args.kcs[i];$scope.updateKC=kcomponent,$scope.updateWithin(args.difficulty)}$scope.$emit("KCupdated",{})}),$scope.reset_kcs=function(){console.log("resetting kcs"),console.log($scope);for(var i=0;i<$scope.kcomponents.length;i++)$scope.kcomponents[i].mastered=!1,$scope.kcomponents[i].percentComplete=0,$scope.kcomponents[i].$update(function(){},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.scenario2=function(){console.log("scenario 2");for(var i=0;i<$scope.kcomponents.length;i++)i>=0&&3>i&&($scope.kcomponents[i].percentComplete=25,$scope.kcomponents[i].mastered=!1),i>=3&&6>i&&($scope.kcomponents[i].percentComplete=25,$scope.kcomponents[i].mastered=!1),i>=6&&9>i&&($scope.kcomponents[i].percentComplete=40,$scope.kcomponents[i].mastered=!1),i>=9&&12>i&&($scope.kcomponents[i].percentComplete=40,$scope.kcomponents[i].mastered=!1),i>=12&&15>i&&($scope.kcomponents[i].percentComplete=80,$scope.kcomponents[i].mastered=!1),i>=15&&18>i&&($scope.kcomponents[i].percentComplete=100,$scope.kcomponents[i].mastered=!0),$scope.kcomponents[i].$update(function(){$location.path("/")},function(errorResponse){$scope.error=errorResponse.data.message})}}]),angular.module("kcomponents").factory("Kcomponents",["$resource",function($resource){return $resource("kcomponents/:kcomponentId",{kcomponentId:"@_id"},{update:{method:"PUT"}})}]),angular.module("levels").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Levels","levels","dropdown","/levels(/create)?"),Menus.addSubMenuItem("topbar","levels","List Levels","levels"),Menus.addSubMenuItem("topbar","levels","New Level","levels/create")}]),angular.module("levels").config(["$stateProvider",function($stateProvider){$stateProvider.state("listLevels",{url:"/levels",templateUrl:"modules/levels/views/list-levels.client.view.html"}).state("createLevel",{url:"/levels/create",templateUrl:"modules/levels/views/create-level.client.view.html"}).state("viewLevel",{url:"/levels/:levelId",templateUrl:"modules/levels/views/view-level.client.view.html"}).state("editLevel",{url:"/levels/:levelId/edit",templateUrl:"modules/levels/views/edit-level.client.view.html"})}]),angular.module("levels").controller("LevelsController",["$scope","$stateParams","$location","Authentication","Levels","$rootScope",function($scope,$stateParams,$location,Authentication,Levels,$rootScope){$scope.authentication=Authentication,$scope.masteredLevel,$scope.difficulty_sequence="32122232",$scope.create=function(){var level=new Levels({name:this.name,leveltype:this.leveltype,icon:this.icon,example1:this.example1,example2:this.example2});level.$save(function(response){$location.path("levels/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(level){if(level){level.$remove();for(var i in $scope.levels)$scope.levels[i]===level&&$scope.levels.splice(i,1)}else $scope.level.$remove(function(){$location.path("levels")})},$scope.update=function(){if($scope.level.kcomponentList.length>3){var res=$scope.level.kcomponentList.split(" "),level=$scope.level;level.kcomponents=res,delete level.kcomponentList}level.$update(function(){$location.path("levels/"+level._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.levels=Levels.query(),$scope.levels.$promise.then(function(result){console.log($scope.levels);for(var i=0;i<$scope.levels.length;i++){var levelmastered=($scope.levels[i],result[i].mastered),kcmastered=!0;$scope.levels[i].progress=100;for(var j=0;j<$scope.levels[i].kcomponents.length;j++)0==$scope.levels[i].kcomponents[j].mastered&&(kcmastered=!1),$scope.levels[i].progress>$scope.levels[i].kcomponents[j].percentComplete&&($scope.levels[i].progress=$scope.levels[i].kcomponents[j].percentComplete);if(0==levelmastered&&1==kcmastered){$scope.levels[i].mastered=!0;for(var k=0;k<$scope.levels[i].kcomponents.length;k++)$scope.levels[i].kcomponents[k]=$scope.levels[i].kcomponents[k]._id;$scope.levels[i].user=$scope.levels[i].user._id,$scope.levels[i].$update(function(){$scope.find()},function(errorResponse){$scope.error=errorResponse.data.message,console.log($scope.error)}),$rootScope.$broadcast("levelmastered",{levelid:i}),console.log("levelmastered "+i)}else if(0==kcmastered&&1==levelmastered){$scope.levels[i].mastered=!1;for(var k=0;k<$scope.levels[i].kcomponents.length;k++)$scope.levels[i].kcomponents[k]=$scope.levels[i].kcomponents[k]._id;$scope.levels[i].user=$scope.levels[i].user._id,$scope.levels[i].$update(function(){$scope.find()},function(errorResponse){$scope.error=errorResponse.data.message})}}})},$scope.findOne=function(){$scope.level=Levels.get({levelId:$stateParams.levelId},function(){$scope.level.kcomponentList="",console.log($scope.level);for(var i=0;i<$scope.level.kcomponents.length;i++)$scope.level.kcomponentList=$scope.level.kcomponentList+$scope.level.kcomponents[i]+" ";$scope.level.kcomponentList=$scope.level.kcomponentList.substr(0,$scope.level.kcomponentList.length-1)})},$scope.findOneID=function(levelId){$scope.level=Levels.get({levelId:levelId},function(){$scope.level.kcomponentList="",console.log($scope.level),$scope.level.progress=100;for(var i=0;i<$scope.level.kcomponents.length;i++)$scope.level.kcomponentList=$scope.level.kcomponentList+$scope.level.kcomponents[i]+" ",$scope.level.progress>$scope.level.kcomponents[i].percentComplete&&($scope.level.progress=$scope.level.kcomponents[i].percentComplete);$scope.level.kcomponentList=$scope.level.kcomponentList.substr(0,$scope.level.kcomponentList.length-1)})},$scope.complete_level=function(){console.log("level completed"),$scope.level_complete_message=!0},$scope.level_complete_next=function(){console.log("level complete next"),$scope.level_complete_message=!1,$scope.problem_selection_rating()},$scope.problem_selection_rating=function(){console.log("problem selection rating show"),$scope.problem_selection_message=!0},$scope.problem_selection_next=function(){console.log("problem selection next"),$scope.problem_selection_message=!1,$scope.suggested_level_message=!0},$scope.suggested_level_next=function(){$scope.suggested_level_message=!1},$scope.bad_selection_click=function(){console.log("bad selection"),$scope.bad_selection=!0},$scope.$on("alreadymastered",function(){console.log("bad selection"),$scope.bad_selection=!0}),$scope.bad_selection_next=function(a){$scope.bad_selection=!1,1==a&&($scope.problem_screen=!1)},$scope.positive_feedback_click=function(){$scope.positive_feedback=!0},$scope.positive_feedback_next=function(){$scope.positive_feedback=!1},$scope.daily_challenge_selected=1,$scope.daily_challenge_new=$scope.daily_challenge_selected,$scope.select1=!0,$scope.challenge_name="I Ain't Scared",$scope.daily_challenge_click=function(){$scope.daily_challenge=!0},$scope.prospective_challenge=function(a){$scope.daily_challenge_new=a,1==a&&($scope.select1=!0,$scope.select2=!1,$scope.select3=!1,$scope.challenge_name="I Ain't Scared"),2==a&&($scope.select1=!1,$scope.select2=!0,$scope.select3=!1,$scope.challenge_name="Elemental Sampler"),3==a&&($scope.select1=!1,$scope.select2=!1,$scope.select3=!0,$scope.challenge_name="Hot Streak")},$scope.daily_challenge_next=function(){$scope.daily_challenge=!1,$scope.daily_challenge_selected=$scope.daily_challenge_new},$scope.$on("KCupdated",function(){console.log("received KCupdated"),setTimeout(function(){$scope.find()},500)}),$scope.select_level=function(levelindex){console.log("select_level("+levelindex+")");for(var mastered=!0,i=0;i<$scope.levels[levelindex].kcomponents.length;i++)0==$scope.levels[levelindex].kcomponents[i].mastered&&(mastered=!1);1==mastered?(console.log("already mastered"),$scope.$broadcast("alreadymastered",{}),$rootScope.$broadcast("levelselect",{level:levelindex,mastered:!0})):0==mastered&&$rootScope.$broadcast("levelselect",{level:levelindex,mastered:!1})},$scope.$on("levelmastered",function(event,data){console.log("LevelsClientController received levelmastered"),console.log("levelid = "+data.levelid),$scope.level_complete_message=!0,$scope.masteredLevel=$scope.levels[data.levelid],console.log($scope.masteredLevel)}),$scope.problem_screen=!1,$scope.hint_visible=!1,$scope.problem=new Object,$scope.$on("levelselect",function(data,args){$scope.selectedLevel=$scope.levels[args.level],$scope.problem_screen=!0;var sequence=$scope.levels[args.level].sequence.toString();console.log(sequence);var difficulty=parseInt(sequence.slice(0,1));$scope.levels[args.level].sequence=$scope.levels[args.level].sequence.slice(1)+difficulty,console.log($scope.levels[args.level]);var difficulty=parseInt($scope.difficulty_sequence.slice(0,1));$scope.difficulty_sequence=$scope.difficulty_sequence.slice(1)+difficulty,(difficulty>3||1>difficulty)&&(difficulty=2),console.log("difficulty = "+difficulty),$scope.problem.difficulty=difficulty,$scope.levelindex=args.level,$scope.hint_visible=!1}),$scope.problem_complete=function(difficulty,levelindex,status){1==status?(console.log("problem complete"),console.log(difficulty+" "+levelindex+" "+status),$scope.problem_screen=!1,$rootScope.$broadcast("levelcomplete",{difficulty:difficulty,level:levelindex}),console.log("$scope.levels: "),console.log($scope.levels),$rootScope.$broadcast("KCbroadcast",{kcs:$scope.levels[levelindex].kcomponents,difficulty:difficulty}),console.log("broadcasted KCbroadcast")):-1==status&&(console.log("problem complete received "+status+" , back to selection"),$scope.problem_screen=!1)},$scope.hint_click=function(){$scope.hint_visible=!0},$scope.aint_scared_complete=!1,$scope.$on("aint_scared_complete",function(){console.log("received aint scared complete"),$scope.aint_scared_complete=!0}),$scope.hot_streak_complete=!1,$scope.$on("hot_streak_complete",function(){console.log("received hot streak complete"),$scope.hot_streak_complete=!0}),$scope.trophy_case_show=!1,$scope.trophy_case_click=function(a){$scope.trophy_case_show=1==a?!0:!1}}]).directive("myKc",function(){console.log()}),angular.module("levels").factory("Levels",["$resource",function($resource){return $resource("levels/:levelId",{levelId:"@_id"},{update:{method:"PUT"}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invalid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http.delete("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("TestController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.displayName="test",$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("UserInfoController2",["$scope","Authentication","$rootScope",function($scope,Authentication){$scope.authentication=Authentication,console.log(Authentication),$scope.displayName=Authentication.user.displayName,$scope.selectionLevel=Authentication.user.selectionLevel,$scope.completionLevel=Authentication.user.completionLevel,$scope.$on("levelselect",function(event,data){console.log("UserInfoController received levelselect"),console.log(data.level),console.log(data.mastered)
})}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]);